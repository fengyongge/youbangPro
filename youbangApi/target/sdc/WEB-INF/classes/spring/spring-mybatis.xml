<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
">



	<!-- JNDI方式配置数据源  Tomcat 数据源配置-->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
			<property name="jndiName" value="${jndiName}"></property>
	 </bean> -->
	<!-- 配置数据源1 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

		<property name="url" value="${jdbc1.url}" />
		<property name="username" value="${jdbc1.username}" />
		<property name="password" value="${jdbc1.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc1.initialSize}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${jdbc1.maxActive}" />
		<!-- 连接池最大空闲 -->
		<!-- <property name="maxIdle" value="20" /> -->
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc1.minIdle}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${jdbc1.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc1.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />

		<!-- 监控数据库 --><!-- sql注入过滤 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="${jdbc.filters}" />

	</bean>

	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

		<property name="dataSource" ref="dataSource" />
		<!-- 捕获mybatis sql配置  by today at 2016-12-17 -->
		<property name="configLocation" value="classpath:spring/mybatis_config/mybatis-config.xml" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置com.common.user.cdh -->
		<property name="mapperLocations" value="classpath:mapping/*/*Mapper.xml" />
		<!-- 分页插件开始 -->
		<property name="typeAliasesPackage" value="com.isea533.ssm.model"/>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<value>
							<!-- 注意写法，参数后面等于号，然后写配置项目 -->
							helperDialect=mysql
							params=pageNum=start;pageSize=limit;
						</value>
					</property>
				</bean>
			</array>
		</property>
		<!-- 分页插件结束 -->
	</bean>


	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="markerInterface" value="com.test.utils.BaseMapper" />
		<property name="basePackage" value="com.test.common.*.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>


	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />







	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.test.common.*.service</value>
				<value>com.test.common.*.mapper</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>








</beans>